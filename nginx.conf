events {
    worker_connections 1024;
}

http {
    upstream api_service {
        server api1:5000;
        server api2:5000;
        # Algoritmo de balanceo de carga - opciones:
        # least_conn; # Menos conexiones - útil para conexiones persistentes largas
        # ip_hash;    # Enruta el cliente siempre a la misma instancia - útil para sesiones
        # round_robin; # Por defecto, las peticiones se distribuyen equitativamente
    }

    upstream search_service {
        server search_service1:5500;
        server search_service2:5500;
        # Se puede definir parámetros adicionales para el balanceo
        # weight=n      # Asigna un peso para el algoritmo de balanceo
        # max_fails=n   # Número de fallos antes de marcar como no disponible
        # fail_timeout=n # Tiempo después del cual reintentar con un servidor que falló
    }

    upstream auth_service {
        server auth_service1:4000;
        server auth_service2:4000;
    }

    # Definición del tiempo de respuesta, timeout, etc.
    proxy_connect_timeout 300s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;

    server {
        listen 80;

        location /api/ {
            proxy_pass http://api_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Headers útiles para aplicaciones modernas
            proxy_set_header Connection "upgrade";
            proxy_set_header Upgrade $http_upgrade;
        }

        location /search/ {
            proxy_pass http://search_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /auth/ {
            proxy_pass http://auth_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Opcionalmente podemos agregar una ruta para health checks
        location /health {
            access_log off;
            return 200 "OK\n";
        }
    }
}
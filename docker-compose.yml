version: "3.9"

services:
  # PostgreSQL
  postgres:
    image: postgres:17
    container_name: postgres_container
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: postgres -c 'listen_addresses=*' -c 'password_encryption=md5'
    ports:
      - "15432:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Warehouse (OLAP)
  postgres_warehouse:
    image: postgres:17
    container_name: postgres_warehouse
    profiles:
      - analytics
    restart: always
    environment:
      POSTGRES_USER: ${WAREHOUSE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${WAREHOUSE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${WAREHOUSE_POSTGRES_DB}
    command: >
      postgres 
      -c listen_addresses='*' 
      -c password_encryption=md5
      -c shared_preload_libraries='pg_stat_statements'
      -c pg_stat_statements.track=all
      -c work_mem=256MB
      -c maintenance_work_mem=512MB
      -c effective_cache_size=2GB
      -c random_page_cost=1.1
      -c max_connections=200
    ports:
      - "15433:5432"
    volumes:
      - postgres_warehouse_data:/var/lib/postgresql/data
      - ./warehouse.sql:/docker-entrypoint-initdb.d/01-warehouse.sql
      - ./warehouse_procedures.sql:/docker-entrypoint-initdb.d/02-warehouse_procedures.sql
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${WAREHOUSE_POSTGRES_USER} -d ${WAREHOUSE_POSTGRES_DB}"]
      interval: 15s
      timeout: 10s
      retries: 5

  # PostgreSQL para Hive (separado)
  postgres-hive:
    image: postgres:13
    container_name: postgres_hive
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_HIVE_USER}
      POSTGRES_PASSWORD: ${POSTGRES_HIVE_PASSWORD}
      POSTGRES_DB: ${POSTGRES_HIVE_DB}
    command: postgres -c 'listen_addresses=*' -c 'password_encryption=md5'
    ports:
      - "15434:5432"
    volumes:
      - postgres_hive_data:/var/lib/postgresql/data
    networks:
      - app_network

  # REDIS (CACHÉ VOLÁTIL)
  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - app_network

  # Elastic Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "${ELASTIC_PORT}:${ELASTIC_PORT}"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    networks:
      - app_network

  neo4j:
    image: neo4j:latest
    container_name: neo4j
    environment:
      - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc"]
    ports:
      - "${NEO4J_HTTP_PORT}:7474"  # Browser web
      - "${NEO4J_PORT}:7687"       # Bolt protocol
    volumes:
      - neo4j_data:/data
    networks:
      - app_network

  # Hadoop NameNode
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - "9870:9870"
      - "9000:9000"
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    networks:
      - app_network

  # Hadoop DataNode
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
    ports:
      - "9864:9864"
    networks:
      - app_network

  # Hive Metastore
  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:9870 datanode:9864 postgres-hive:5432"
      HIVE_SITE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://postgres-hive:5432/${POSTGRES_HIVE_DB}"
      HIVE_SITE_CONF_javax_jdo_option_ConnectionDriverName: "org.postgresql.Driver"
      HIVE_SITE_CONF_javax_jdo_option_ConnectionUserName: ${POSTGRES_HIVE_USER}
      HIVE_SITE_CONF_javax_jdo_option_ConnectionPassword: ${POSTGRES_HIVE_PASSWORD}
      HIVE_SITE_CONF_hive_metastore_schema_verification: "false"
      HIVE_SITE_CONF_datanucleus_schema_autoCreateAll: "true"
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      HDFS_CONF_dfs_nameservices: hdfscluster
      HDFS_CONF_dfs_namenode_rpc_address: namenode:9000
      YARN_CONF_yarn_resourcemanager_hostname: namenode
    ports:
      - "9083:9083"
    depends_on:
      - postgres-hive
      - namenode
      - datanode
    networks:
      - app_network

  # Hive Server
  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-server
    depends_on:
      - hive-metastore
    environment:
      HIVE_SITE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://postgres-hive:5432/${POSTGRES_HIVE_DB}"
      HIVE_SITE_CONF_javax_jdo_option_ConnectionDriverName: "org.postgresql.Driver"
      HIVE_SITE_CONF_javax_jdo_option_ConnectionUserName: ${POSTGRES_HIVE_USER}
      HIVE_SITE_CONF_javax_jdo_option_ConnectionPassword: ${POSTGRES_HIVE_PASSWORD}
      HIVE_SITE_CONF_hive_metastore_uris: "thrift://hive-metastore:9083"
      SERVICE_PRECONDITION: "hive-metastore:9083"
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      HDFS_CONF_dfs_nameservices: hdfscluster
      HDFS_CONF_dfs_namenode_rpc_address: namenode:9000
      YARN_CONF_yarn_resourcemanager_hostname: namenode
      # CONFIGURACIONES DE AUTENTICACIÓN CRÍTICAS
      HIVE_SITE_CONF_hive_server2_authentication: NOSASL
      HIVE_SITE_CONF_hive_server2_transport_mode: binary
      HIVE_SITE_CONF_hive_server2_thrift_port: "10000"
      HIVE_SITE_CONF_hive_server2_enable_doAs: "false"
    ports:
      - "10000:10000"
    networks:
      - app_network

  # AUTH SERVICE - INSTANCIA 1
  auth_service1:
    build: ./auth_service
    container_name: auth_service1
    profiles:
      - backend
      - test
    restart: always
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    depends_on:
      - postgres
      - mongos1
    environment:
      API_URL: ${API_URL}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: ${REDIS_HOST}
      DB_TYPE: ${DB_TYPE}
      MONGO_URI: ${MONGO_URI}
      DB_HOST: ${POSTGRES_HOST}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      DB_PORT: ${POSTGRES_PORT}
      AUTH_PORT: ${AUTH_PORT}
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - app_network

  # AUTH SERVICE - INSTANCIA 2
  auth_service2:
    build: ./auth_service
    container_name: auth_service2
    profiles:
      - backend
      - test
    restart: always
    expose:
      - "${AUTH_PORT}"
    depends_on:
      - postgres
      - mongos1
    environment:
      API_URL: ${API_URL}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: ${REDIS_HOST}
      DB_TYPE: ${DB_TYPE}
      MONGO_URI: ${MONGO_URI}
      DB_HOST: ${POSTGRES_HOST}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      DB_PORT: ${POSTGRES_PORT}
      AUTH_PORT: ${AUTH_PORT}
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - app_network

  auth_test:
    build:
      context: ./auth_service
      dockerfile: dockerfile.test
    container_name: auth_service_test_container
    profiles:
      - test
    depends_on:
      - postgres
      - mongos1
    environment:
      API_URL: ${API_URL}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: ${REDIS_HOST}
      DB_TYPE: ${DB_TYPE}
      MONGO_URI: ${MONGO_URI}
      DB_HOST: ${POSTGRES_HOST}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      DB_PORT: ${POSTGRES_PORT}
      AUTH_PORT: ${AUTH_PORT}
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - app_network

  # API SERVICE - INSTANCIA 1
  api1:
    build: ./api
    container_name: api1
    profiles:
      - backend
      - test
    restart: always
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      - auth_service1
      - postgres
      - mongos1
    environment:
      AUTH_SERVICE_URL: ${AUTH_SERVICE_URL}
      SEARCH_SERVICE_URL: ${SEARCH_SERVICE_URL}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: ${REDIS_HOST}
      DB_TYPE: ${DB_TYPE}
      MONGO_URI: ${MONGO_URI}
      DB_HOST: ${POSTGRES_HOST}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      DB_PORT: ${POSTGRES_PORT}
      API_PORT: ${API_PORT}
    networks:
      - app_network

  # API SERVICE - INSTANCIA 2
  api2:
    build: ./api
    container_name: api2
    profiles:
      - backend
      - test
    restart: always
    expose:
      - "${API_PORT}"
    depends_on:
      - auth_service1
      - postgres
      - mongos1
    environment:
      AUTH_SERVICE_URL: ${AUTH_SERVICE_URL}
      SEARCH_SERVICE_URL: ${SEARCH_SERVICE_URL}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: ${REDIS_HOST}
      DB_TYPE: ${DB_TYPE}
      MONGO_URI: ${MONGO_URI}
      DB_HOST: ${POSTGRES_HOST}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      DB_PORT: ${POSTGRES_PORT}
      API_PORT: ${API_PORT}
    networks:
      - app_network

  api_test:
    build:
      context: ./api
      dockerfile: dockerfile.test
    container_name: api_service_test_container
    profiles:
      - test
    depends_on:
      - postgres
      - mongos1
    environment:
      AUTH_SERVICE_URL: ${AUTH_SERVICE_URL}
      SEARCH_SERVICE_URL: ${SEARCH_SERVICE_URL}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: ${REDIS_HOST}
      DB_TYPE: ${DB_TYPE}
      MONGO_URI: ${MONGO_URI}
      DB_HOST: ${POSTGRES_HOST}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      DB_PORT: ${POSTGRES_PORT}
      API_PORT: ${API_PORT}
    networks:
      - app_network

  # SEARCH SERVICE - INSTANCIA 1
  search_service1:
    build: ./search_service
    container_name: search_service1
    profiles:
      - backend
      - test
    restart: always
    ports:
      - "${SEARCH_PORT}:${SEARCH_PORT}"
    depends_on:
      - auth_service1
      - api1
      - elasticsearch
      - redis
    environment:
      - API_URL=${API_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - ELASTIC_NODE=${ELASTIC_NODE}
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - SEARCH_PORT=${SEARCH_PORT}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - app_network

  # SEARCH SERVICE - INSTANCIA 2
  search_service2:
    build: ./search_service
    container_name: search_service2
    profiles:
      - backend
      - test
    restart: always
    expose:
      - "${SEARCH_PORT}"
    depends_on:
      - auth_service1
      - api1
      - elasticsearch
      - redis
    environment:
      - API_URL=${API_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - ELASTIC_NODE=${ELASTIC_NODE}
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - SEARCH_PORT=${SEARCH_PORT}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - app_network

  search_test:
    build:
      context: ./search_service
      dockerfile: dockerfile.test
    container_name: search_service_test_container
    profiles:
      - test
    depends_on:
      - elasticsearch
      - redis
    environment:
      - API_URL=${API_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - ELASTIC_NODE=${ELASTIC_NODE}
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - SEARCH_PORT=${SEARCH_PORT}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - app_network

  # GRAPH SERVICE - INSTANCIA 1
  graph_service1:
    build: ./graph_service
    container_name: graph_service1
    profiles:
      - backend
    restart: always
    ports:
      - "${GRAPH_PORT}:${GRAPH_PORT}"
    depends_on:
      - auth_service1
      - api1
      - neo4j
      - redis
    environment:
      - API_URL=${API_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - DB_TYPE=${DB_TYPE}
      - GRAPH_PORT=${GRAPH_PORT}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - app_network

  # GRAPH SERVICE - INSTANCIA 2
  graph_service2:
    build: ./graph_service
    container_name: graph_service2
    profiles:
      - backend
    restart: always
    expose:
      - "${GRAPH_PORT}"
    depends_on:
      - auth_service1
      - api1
      - neo4j
      - redis
    environment:
      - API_URL=${API_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - DB_TYPE=${DB_TYPE}
      - GRAPH_PORT=${GRAPH_PORT}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - app_network
    
  # ANALYTICS SERVICE (OLAP & Data Warehouse)
  analytics_service:
    build: ./analytics_service
    container_name: analytics_service
    profiles:
      - analytics
    restart: always
    ports:
      - "5800:5800"
    depends_on:
      - postgres_warehouse
      - postgres
      - mongos1
    environment:
      # Warehouse PostgreSQL
      - WAREHOUSE_POSTGRES_HOST=${WAREHOUSE_POSTGRES_HOST}
      - WAREHOUSE_POSTGRES_USER=${WAREHOUSE_POSTGRES_USER}
      - WAREHOUSE_POSTGRES_PASSWORD=${WAREHOUSE_POSTGRES_PASSWORD}
      - WAREHOUSE_POSTGRES_DB=${WAREHOUSE_POSTGRES_DB}
      - WAREHOUSE_POSTGRES_PORT=${POSTGRES_PORT}
      # Source databases
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - MONGO_URI=${MONGO_URI}
      - ANALYTICS_PORT=${ANALYTICS_PORT}
    networks:
      - app_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_container
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      - postgres
    networks:
      - app_network

  # Config Servers MongoDB
  mongocfg1:
    image: mongo:6.0.6
    container_name: mongocfg1
    command: mongod --configsvr --replSet configReplSet --port 27017 --bind_ip_all
    volumes:
      - mongocfg1-data:/data/db
    networks:
      - app_network

  mongocfg2:
    image: mongo:6.0.6
    container_name: mongocfg2
    command: mongod --configsvr --replSet configReplSet --port 27017 --bind_ip_all
    volumes:
      - mongocfg2-data:/data/db
    networks:
      - app_network

  mongocfg3:
    image: mongo:6.0.6
    container_name: mongocfg3
    command: mongod --configsvr --replSet configReplSet --port 27017 --bind_ip_all
    volumes:
      - mongocfg3-data:/data/db
    networks:
      - app_network

  # Primer Shard ReplicaSet
  mongors1n1:
    image: mongo:6.0.6
    container_name: mongors1n1
    command: mongod --shardsvr --replSet shard1ReplSet --port 27017 --bind_ip_all
    volumes:
      - mongors1n1-data:/data/db
    networks:
      - app_network

  mongors1n2:
    image: mongo:6.0.6
    container_name: mongors1n2
    command: mongod --shardsvr --replSet shard1ReplSet --port 27017 --bind_ip_all
    volumes:
      - mongors1n2-data:/data/db
    networks:
      - app_network

  mongors1n3:
    image: mongo:6.0.6
    container_name: mongors1n3
    command: mongod --shardsvr --replSet shard1ReplSet --port 27017 --bind_ip_all
    volumes:
      - mongors1n3-data:/data/db
    networks:
      - app_network

  # Segundo Shard ReplicaSet
  mongors2n1:
    image: mongo:6.0.6
    container_name: mongors2n1
    command: mongod --shardsvr --replSet shard2ReplSet --port 27017 --bind_ip_all
    volumes:
      - mongors2n1-data:/data/db
    networks:
      - app_network

  mongors2n2:
    image: mongo:6.0.6
    container_name: mongors2n2
    command: mongod --shardsvr --replSet shard2ReplSet --port 27017 --bind_ip_all
    volumes:
      - mongors2n2-data:/data/db
    networks:
      - app_network

  mongors2n3:
    image: mongo:6.0.6
    container_name: mongors2n3
    command: mongod --shardsvr --replSet shard2ReplSet --port 27017 --bind_ip_all
    volumes:
      - mongors2n3-data:/data/db
    networks:
      - app_network

  # Mongos Router
  mongos1:
    image: mongo:6.0.6
    container_name: mongos1
    ports:
      - "27019:27017"
    depends_on:
      - mongocfg1
      - mongocfg2
      - mongocfg3
      - mongors1n1
      - mongors1n2
      - mongors1n3
    command: mongos --configdb configReplSet/mongocfg1:27017,mongocfg2:27017,mongocfg3:27017 --port 27017 --bind_ip_all
    networks:
      - app_network

  mongos2:
    image: mongo:6.0.6
    container_name: mongos2
    ports:
      - "27029:27017"
    depends_on:
      - mongocfg1
      - mongocfg2
      - mongocfg3
      - mongors1n1
      - mongors1n2
      - mongors1n3
    command: mongos --configdb configReplSet/mongocfg1:27017,mongocfg2:27017,mongocfg3:27017 --port 27017 --bind_ip_all
    networks:
      - app_network

  mongos3:
    image: mongo:6.0.6
    container_name: mongos3
    ports:
      - "27039:27017"
    depends_on:
      - mongocfg1
      - mongocfg2
      - mongocfg3
      - mongors1n1
      - mongors1n2
      - mongors1n3
    command: mongos --configdb configReplSet/mongocfg1:27017,mongocfg2:27017,mongocfg3:27017 --port 27017 --bind_ip_all
    networks:
      - app_network

  # Mongo Express (admin web para Mongo)
  mongo-express:
    image: mongo-express
    container_name: mongo_express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGOSRV: "false"
      ME_CONFIG_MONGODB_SERVER: mongos1
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASS}
    depends_on:
      - mongos1
    networks:
      - app_network

  # Kibana (para gestionar ElasticSearch)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTIC_NODE}
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - app_network

  # Load Balancer
  nginx:
    image: nginx:latest
    container_name: nginx_load_balancer
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
      - search_service1
      - search_service2
      - auth_service1
      - auth_service2
    networks:
      - app_network
    profiles:
      - backend

volumes:
  postgres_data:
  mongocfg1-data:
  mongocfg2-data:
  mongocfg3-data:
  mongors1n1-data:
  mongors1n2-data:
  mongors1n3-data:
  mongors2n1-data:
  mongors2n2-data:
  mongors2n3-data:
  elastic_data:
  neo4j_data:
  postgres_hive_data:
  hadoop_namenode:
  hadoop_datanode:
  warehouse_duckdb_data:
  postgres_warehouse_data:

networks:
  app_network: